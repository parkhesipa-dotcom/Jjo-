import base64, json, requests
from Crypto.Cipher import AES, PKCS1_OAEP
from Crypto.PublicKey import RSA
from Crypto.Random import get_random_bytes

# -----------------------------------------------------------
# ðŸ”¹ Step 1: Input credentials and API details
# -----------------------------------------------------------


# Paste your RBI public certificate (with BEGIN/END lines)


# -----------------------------------------------------------
# ðŸ”¹ Step 2: AES-GCM Encryption Function (matches Java code)
# -----------------------------------------------------------
def aes_gcm_encrypt(plain_text, key):
    iv = get_random_bytes(12)  # 96-bit nonce for GCM
    cipher = AES.new(key, AES.MODE_GCM, nonce=iv)
    ciphertext, tag = cipher.encrypt_and_digest(plain_text.encode("utf-8"))
    # Concatenate IV + Ciphertext + Tag â†’ Base64
    return base64.b64encode(iv + ciphertext + tag).decode("utf-8")

# -----------------------------------------------------------
# ðŸ”¹ Step 3: Generate AES Key (256-bit)
# -----------------------------------------------------------
aes_key = get_random_bytes(32)

# -----------------------------------------------------------
# ðŸ”¹ Step 4: Encrypt Client Auth Info
# -----------------------------------------------------------
client_auth_plain = f"{client_id}*{client_secret}"  # separator per spec
encrypted_client_auth = aes_gcm_encrypt(client_auth_plain, aes_key)

# -----------------------------------------------------------
# ðŸ”¹ Step 5: Encrypt LRS Data Body
# -----------------------------------------------------------
data_body = [
    {
        "structureRefvo": {"code": "LRSDATA", "version": 1, "agencyID": "RBI"},
        "obs": [{"pan": ["AAAPD5981D"]}]
    }
]
encrypted_body = aes_gcm_encrypt(json.dumps(data_body), aes_key)

# -----------------------------------------------------------
# ðŸ”¹ Step 6: Encrypt AES Key with RBI Public Key (RSA-OAEP)
# -----------------------------------------------------------
public_key = RSA.import_key(rbi_public_cert)
cipher_rsa = PKCS1_OAEP.new(public_key)
rsa_encrypted_key = cipher_rsa.encrypt(aes_key)
encrypted_key_data = base64.b64encode(rsa_encrypted_key).decode("utf-8")

# -----------------------------------------------------------
# ðŸ”¹ Step 7: Construct Final Request Body
# -----------------------------------------------------------
final_body = {
    "header": {
        "authinfo": {
            "LoginParams": ["CLIENT_AUTH_INFO", encrypted_client_auth],
            "UserType": "SYSTEM",
            "AuthenticationType": "API_AUTH",
            "Key_data": encrypted_key_data
        }
    },
    "body": {"LRS_body": encrypted_body}
}

# -----------------------------------------------------------
# ðŸ”¹ Step 8: Print and Send the Request
# -----------------------------------------------------------
print("âœ… Final Encrypted Request Body:\n")
print(json.dumps(final_body, indent=4))

headers = {"Content-Type": "application/json"}
response = requests.post(api_url, headers=headers, json=final_body)

print("\nðŸ”¹ Response Status:", response.status_code)
print("ðŸ”¹ Response Body:", response.text)
