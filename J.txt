import base64, json, requests
from Crypto.Cipher import AES, PKCS1_OAEP
from Crypto.PublicKey import RSA
from Crypto.Random import get_random_bytes
from Crypto.Hash import SHA256

# -----------------------------------------------------------
# 🔹 Step 1 – Input credentials & API details
# -----------------------------------------------------------
client_id =
client_secret = 
api_url = "

# Paste your RBI public certificate exactly as provided (BEGIN/END included)
rbi_public_cert = 

# -----------------------------------------------------------
# 🔹 Step 2 – AES-GCM encryption (IV = 12 bytes, Tag = 128 bits)
# -----------------------------------------------------------
def aes_gcm_encrypt(plain_text: str, key: bytes) -> str:
    iv = get_random_bytes(12)                         # 96-bit nonce
    cipher = AES.new(key, AES.MODE_GCM, nonce=iv)
    ciphertext, tag = cipher.encrypt_and_digest(plain_text.encode("utf-8"))
    encrypted_bytes = iv + ciphertext + tag           # IV + Ciphertext + Tag
    return base64.b64encode(encrypted_bytes).decode("utf-8")

# -----------------------------------------------------------
# 🔹 Step 3 – Generate 256-bit AES key (same as Java KeyGenerator.init(256))
# -----------------------------------------------------------
aes_key = get_random_bytes(32)                        # 32 bytes = 256 bits

# -----------------------------------------------------------
# 🔹 Step 4 – Encrypt Client Auth Info (ID * Secret)
# -----------------------------------------------------------
client_auth_plain = f"{client_id}*{client_secret}"    # spec uses “*” separator
encrypted_client_auth = aes_gcm_encrypt(client_auth_plain, aes_key)

# -----------------------------------------------------------
# 🔹 Step 5 – Encrypt LRS Data Body (only the highlighted dataset block)
# -----------------------------------------------------------
data_body = [
    {
        "structureRefvo": {"code": "LRSDATA", "version": 1, "agencyID": "RBI"},
        "obs": [{"pan": ["AAAPD5981D"]}]
    }
]
encrypted_body = aes_gcm_encrypt(json.dumps(data_body), aes_key)

# -----------------------------------------------------------
# 🔹 Step 6 – Encrypt AES key with RBI Public Key using RSA/ECB/OAEP SHA-256
# -----------------------------------------------------------
public_key = RSA.import_key(rbi_public_cert)
cipher_rsa = PKCS1_OAEP.new(public_key, hashAlgo=SHA256)   # SHA-256 & MGF1(SHA-256)
rsa_encrypted_key = cipher_rsa.encrypt(aes_key)
encrypted_key_data = base64.b64encode(rsa_encrypted_key).decode("utf-8")

# -----------------------------------------------------------
# 🔹 Step 7 – Construct Final Request JSON
# -----------------------------------------------------------
final_body = {
    "header": {
        "authinfo": {
            "LoginParams": ["CLIENT_AUTH_INFO", encrypted_client_auth],
            "UserType": "SYSTEM",
            "AuthenticationType": "API_AUTH",
            "Key_data": encrypted_key_data
        }
    },
    "body": {"LRS_body": encrypted_body}
}

# -----------------------------------------------------------
# 🔹 Step 8 – Print and Send the Request
# -----------------------------------------------------------
print("✅ Final Encrypted Request Body:\n")
print(json.dumps(final_body, indent=4))

headers = {"Content-Type": "application/json"}
response = requests.post(api_url, headers=headers, json=final_body)

print("\n🔹 Response Status:", response.status_code)
print("🔹 Response Body:", response.text)
